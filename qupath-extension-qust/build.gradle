plugins {
  id 'java-library'
  id 'maven-publish'
  id 'org.openjfx.javafxplugin' version '0.1.0'
  // Version in settings.gradle
  id 'org.bytedeco.gradle-javacpp-platform'
}

ext.moduleName = 'qupath.extension.QuST'
ext.qupathVersion = gradle.ext.qupathVersion

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

base {
	description = 'QuPath extension for QuST'
	version = "0.5.0"
	group = 'io.github.qupath'
}

repositories {
	// Use this only for local development!
//  mavenLocal()

	mavenCentral()

	maven {
		url "https://maven.scijava.org/content/repositories/releases"
	}

	maven {
		url "https://maven.scijava.org/content/repositories/snapshots"
	}
}

dependencies {
    implementation "io.github.qupath:qupath-gui-fx:${qupathVersion}"
    implementation "io.github.qupath:qupath-core:${qupathVersion}"
    implementation "io.github.qupath:qupath-core-processing:${qupathVersion}"
    implementation "io.github.qupath:qupath-extension-stardist:0.5.0"
    implementation libs.bundles.logging
    implementation libs.qupath.fxtras
    
    implementation "org.apache.commons:commons-compress:1.3"
    implementation "org.apache.commons:commons-math3:3.6.1"
    implementation "org.imgscalr:imgscalr-lib:4.2"
    implementation "com.opencsv:opencsv:5.5.2"
    implementation "commons-io:commons-io:2.11.0"    
    implementation "org.slf4j:slf4j-api:1.7.30"
    implementation "net.mahdilamb:colormap:0.9.61"
    implementation "org.ini4j:ini4j:0.5.4"
    implementation "org.json:json:20230227"
    
    // Core DJL API
    implementation "ai.djl:api:0.24.0"
    // PyTorch Engine (choose one based on your platform)
    implementation "ai.djl.pytorch:pytorch-engine:0.24.0"
    // PyTorch Model Zoo (optional, for pre-trained models)
    implementation "ai.djl.pytorch:pytorch-model-zoo:0.24.0"
    // Platform-specific PyTorch native libraries
    // Choose ONE of the following based on your target platform:
    // For Windows with CPU only
    runtimeOnly "ai.djl.pytorch:pytorch-native-cpu:1.13.1:win-x86_64"
    // For Windows with CUDA support (if you have NVIDIA GPU)
    // runtimeOnly "ai.djl.pytorch:pytorch-native-cu118:1.13.1:win-x86_64"
    // For Linux with CPU only
    // runtimeOnly "ai.djl.pytorch:pytorch-native-cpu:1.13.1:linux-x86_64"
    // For Linux with CUDA support
    // runtimeOnly "ai.djl.pytorch:pytorch-native-cu118:1.13.1:linux-x86_64"
    // For macOS (CPU only)
    // runtimeOnly "ai.djl.pytorch:pytorch-native-cpu:1.13.1:osx-x86_64"
    // For macOS Apple Silicon (M1/M2 with MPS support)
    // runtimeOnly "ai.djl.pytorch:pytorch-native-cpu:1.13.1:osx-aarch64"
    // Computer Vision utilities
    implementation "ai.djl:basicdataset:0.24.0"
    
    // implementation 'com.fasterxml.jackson.core:jackson-databind:2.15.2'
    // implementation 'com.fasterxml.jackson.core:jackson-core:2.15.2'
    // implementation 'com.fasterxml.jackson.core:jackson-annotations:2.15.2'
    
    
    implementation files("java-hdf5/hdf5.jar")
    // implementation fileTree(dir: 'java-hdf5', include: ['*.jar'])
    // implementation fileTree(dir: './scripts', include: ['*.py'])

    // testImplementation libs.junit
    // testRuntimeOnly libs.junit.platform
}

processResources {
  from ("${projectDir}/LICENSE") {
    into 'META-INF/licenses/'
  }
}

tasks.register("copyDependencies", Copy) {
    description "Copy dependencies into the build directory for use elsewhere"
    group "QuPath"
    
    from configurations.default
    into 'build/libs'
    
    from('java-hdf5') {
    	include '*.so'
    }
    into 'src/main/resources/native/linux'
}

/*
 * Ensure Java 11 compatibility
 */
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
    if (project.properties['sources'])
	    withSourcesJar()
    if (project.properties['javadocs'])
	    withJavadocJar()
}

/*
 * Manifest info
 */
jar {
	manifest {
		attributes("Implementation-Title": project.name,
				   "Implementation-Version": archiveVersion,
				   "Automatic-Module-Name": "io.github." + moduleName)
	}
}

/*
 * Create javadocs for all modules/packages in one place.
 * Use -PstrictJavadoc=true to fail on error with doclint (which is rather strict).
 */
def strictJavadoc = findProperty('strictJavadoc')
if (!strictJavadoc) {
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}
    
/*
 * Avoid 'Entry .gitkeep is a duplicate but no duplicate handling strategy has been set.'
 * when using withSourcesJar()
 */
tasks.withType(org.gradle.jvm.tasks.Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.named('test') {
    useJUnitPlatform()
}

publishing {
	repositories {
		maven {
			name = "SciJava"
			def releasesRepoUrl = uri("https://maven.scijava.org/content/repositories/releases")
			def snapshotsRepoUrl = uri("https://maven.scijava.org/content/repositories/snapshots")
			// Use gradle -Prelease publish
			url = project.hasProperty('release') ? releasesRepoUrl : snapshotsRepoUrl
			credentials {
				username = System.getenv("MAVEN_USER")
				password = System.getenv("MAVEN_PASS")
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				licenses {
					license {
						name = 'Apache License v2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0'
					}
				}
			}
		}
	}
}
